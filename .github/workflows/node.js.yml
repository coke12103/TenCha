# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: TenCha CI

on:
  push:
    tags:
      - v*

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node-version: [14.x]
        os: [windows-2016, ubuntu-latest]

    steps:
    - uses: actions/checkout@v2

    - name: Install pakages(linux)
      if: ${{ runner.os == 'Linux' }}
      run: sudo apt update && sudo apt install -y mesa-common-dev libglu1-mesa-dev libxkbcommon-x11-0

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install deps
      run: npm ci

    - name: Build
      run: npm run build --if-present

    - name: packer init
      run: npx nodegui-packer --init TenCha

    - name: Pack TenCha
      run: npx nodegui-packer --pack ./dist

    - name: Clean(Linux)
      if: ${{ runner.os == 'Linux' }}
      run: rm ${{ github.workspace }}/deploy/linux/build/TenCha/Application-x86_64.AppImage

    - name: Upload Linux package
      uses: actions/upload-artifact@v2
      if: ${{ runner.os == 'Linux' }}
      with:
        name: LinuxPackage
        path: ${{ github.workspace }}/deploy/linux/build/TenCha/

    - name: Upload Windows package
      uses: actions/upload-artifact@v2
      if: ${{ runner.os == 'Windows' }}
      with:
        name: WindowsPackage
        path: ${{ github.workspace }}/deploy/win32/build/TenCha/

  setup-release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Create release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: false

      - name: Info create
        env:
          url: ${{ steps.create_release.outputs.upload_url }}
        run: mkdir artifact && echo $url > artifact/url.txt

      - name: Upload info
        uses: actions/upload-artifact@v1
        with:
          name: artifact
          path: artifact/url.txt

  release:
    needs: setup-release
    runs-on: ubuntu-latest

    steps:
      - name: Download info
        uses: actions/download-artifact@v1
        with:
          name: artifact

      - name: Download linux package
        uses: actions/download-artifact@v1
        with:
          name: LinuxPackage

      - name: Download windows package
        uses: actions/download-artifact@v1
        with:
          name: WindowsPackage

      - name: Read info
        id: get_url
        run: url=$(cat artifact/url.txt) && echo "##[set-output name=upload_url;]$url"

      - name: zip(linux)
        run: zip tencha_linux -r LinuxPackage

      - name: zip(win)
        run: zip tencha_windows -r WindowsPackage

      - name: Upload release asset(linux)
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_url.outputs.upload_url }}
          asset_path: tencha_linux.zip
          asset_name: tencha_linux_${{ github.ref }}.zip
          asset_content_type: application/zip

      - name: Upload release asset(win)
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_url.outputs.upload_url }}
          asset_path: tencha_windows.zip
          asset_name: tencha_windows_${{ github.ref }}.zip
          asset_content_type: application/zip
